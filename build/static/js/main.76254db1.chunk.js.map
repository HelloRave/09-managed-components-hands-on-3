{"version":3,"sources":["App.js","index.js"],"names":["App","state","users","_id","Math","floor","random","name","email","newUserName","newUserEmail","userBeingEdited","editedUserName","editedUserEmail","updateFormField","event","setState","target","value","addUser","beginEdit","user","deleteUser","index","findIndex","u","slice","cancelEdit","confirmEdit","Fragment","type","placeholder","this","onChange","onClick","className","map","class","renderAddUser","React","Component","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.76254db1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nexport default class App extends React.Component {\n  state = {\n    users: [\n      {\n        _id: Math.floor(Math.random() * 10000),\n        name: \"Jon Snow\",\n        email: \"jonsnow@winterfell.com\"\n      },\n      {\n        _id: Math.floor(Math.random() * 10000),\n        name: \"Ned Stark\",\n        email: \"nedstark@winterfell.com\"\n      },\n      {\n        _id: Math.floor(Math.random() * 10000),\n        name: \"Frodo Baggins\",\n        email: \"frodo@bagend.com\"\n      }\n    ],\n    newUserName: \"\",\n    newUserEmail: \"\",\n    userBeingEdited: 0,\n    editedUserName: \"\",\n    editedUserEmail: \"\"\n  };\n\n  renderAddUser() {\n    return (\n      <React.Fragment>\n        <input\n          type=\"text\"\n          placeholder=\"User name\"\n          value={this.state.newUserName}\n          onChange={this.updateFormField}\n          name=\"newUserName\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"User email\"\n          value={this.state.newUserEmail}\n          onChange={this.updateFormField}\n          name=\"newUserEmail\"\n        />\n        <button onClick={this.addUser}>Add</button>\n      </React.Fragment>\n    );\n  }\n\n  updateFormField = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.users.map((user) => {\n          return (\n            <React.Fragment>\n              <div class=\"box\">\n                {user._id === this.state.userBeingEdited ? (\n                  <div>\n                    <input\n                      type=\"text\"\n                      name=\"editedUserName\"\n                      onChange={this.updateFormField}\n                      value={this.state.editedUserName}\n                    />\n                  </div>\n                ) : (\n                  <h3>{user.name}</h3>\n                )}\n                {user._id === this.state.userBeingEdited ? (\n                  <div>\n                    <input\n                      type=\"text\"\n                      name=\"editedUserEmail\"\n                      onChange={this.updateFormField}\n                      value={this.state.editedUserEmail}\n                    />\n                  </div>\n                ) : (\n                  <h4>{user.email}</h4>\n                )}\n                {user._id === this.state.userBeingEdited ? (\n                  <div>\n                    <button\n                      onClick={() => {\n                        this.confirmEdit(user);\n                      }}\n                    >\n                      Confirm\n                    </button>\n                    <button onClick={this.cancelEdit}>Cancel edit</button>\n                  </div>\n                ) : (\n                  <div>\n                    <button\n                      onClick={() => {\n                        this.beginEdit(user);\n                      }}\n                    >\n                      Update\n                    </button>\n                    <button\n                      onClick={() => {\n                        this.deleteUser(user);\n                      }}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                )}\n              </div>\n            </React.Fragment>\n          );\n        })}\n        {this.renderAddUser()}\n      </div>\n    );\n  }\n\n  addUser = () => {\n    // // 1. clone the original array\n    // let cloned = [...this.state.users];\n\n    // // 2. add to the back of the clone\n    // cloned.push({\n    //   _id: Math.floor(Math.random() * 10000),\n    //   name: this.state.newUserName,\n    //   email: this.state.newUserEmail\n    // });\n\n    // // 3. set the clone back into the state\n    // this.setState({\n    //   users: cloned\n    // });\n\n    // short cut\n    this.setState({\n      users: [\n        ...this.state.users,\n        {\n          _id: Math.floor(Math.random() * 10000),\n          name: this.state.newUserName,\n          email: this.state.newUserEmail\n        }\n      ]\n    });\n  };\n\n  beginEdit = (user) => {\n    this.setState({\n      userBeingEdited: user._id,\n      editedUserEmail: user.email,\n      editedUserName: user.name\n    });\n  };\n\n  deleteUser = (user) => {\n    // // 1. clone the original array\n    // let cloned = [...this.state.users];\n\n    // // 2. find the index of the user we want to delete\n    // let index = this.state.users.findIndex((u) => u._id === user._id);\n\n    // // 3. remove from the cloned array\n    // cloned.splice(index, 1);\n\n    // // 4. set the cloned array to replace the original array in the state\n    // this.setState({\n    //   users: cloned\n    // });\n\n    let index = this.state.users.findIndex((u) => u._id === user._id);\n    this.setState({\n      users: [...this.state.slice(0, index), ...this.state.slice(index + 1)]\n    });\n  };\n\n  cancelEdit = () => {\n    this.setState({\n      userBeingEdited: 0\n    });\n  };\n\n  confirmEdit = (user) => {\n    // 1. clone the array\n    // let cloned = [...this.state.users];\n\n    // // 2. create a new user based on the edits\n    // let editUser = {\n    //   ...user,\n    //   email: this.state.editedUserEmail,\n    //   name: this.state.editedUserName\n    // };\n\n    // // 3. find the index of the original user\n    // let index = this.state.users.findIndex((u) => u._id === user._id);\n\n    // // 4. put the new user into the cloned array\n    // cloned[index] = editUser;\n\n    // // 5. set the cloned array back into the state\n    // this.setState({\n    //   users: cloned,\n    //   userBeingEdited: 0\n    // });\n\n    let index = this.state.users.findIndex((u) => u._id === user._id);\n    this.setState({\n      users: [\n        ...this.state.users.slice(0, index),\n        {\n          ...user,\n          email: this.state.editedUserEmail,\n          name: this.state.editedUserName\n        },\n        ...this.state.users.slice(index + 1)\n      ],\n      userBeingEdited: 0\n    });\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}